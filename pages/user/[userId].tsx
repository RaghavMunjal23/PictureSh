import React from "react";
import { motion } from "framer-motion";
import { Flex, Heading, useColorMode } from "@chakra-ui/react";
import Head from "next/head";
import Navbar from "../../components/Navbar";
import Feed from "../../components/Feed";
import ProfileComponent from "../../components/ProfileComponent";
import variants from "../../utils/variants";
import { GetServerSidePropsContext } from "next";
import { getSession, useSession } from "next-auth/react";
import { UserType } from "../../utils/types";
import { wrapper } from "../../redux/store";
import * as api from "../../utils/api";
import { getUsers } from "../../redux/actions/userActions";

const UserProfile = () => {
  const { colorMode } = useColorMode();
  const { data: session } = useSession();
  return (
    <motion.div
      style={{
        minHeight: "100vh",
        width: "100%",
        backgroundColor: colorMode === "light" ? "#f9f9f9" : "#030303",
      }}
      variants={variants}
      initial="hidden"
      animate="enter"
      exit="exit"
      transition={{ type: "linear" }}
    >
      <Head>
        <title>PictureSh - IdiotBoi</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar isProfile={true} user={session?.user as UserType} />
      <Flex
        paddingLeft="25px"
        paddingRight="10px"
        flexDirection="column"
        marginTop="50px"
      >
        <ProfileComponent currentUser={session?.user as UserType} />
        <Heading
          fontSize="lg"
          fontWeight="bold"
          marginTop="30px"
          marginLeft="-10px"
        >
          Userboi images
        </Heading>
        {}
        <Feed isProfile={true} />
      </Flex>
    </motion.div>
  );
};

export default UserProfile;

export const getServerSideProps = wrapper.getServerSideProps(
  (store) => async (context: GetServerSidePropsContext) => {
    const session = await getSession(context);
    await store.dispatch(getUsers(context?.params?.userId as string));
    if (!session) {
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    }
    const { data } = await api.getUser(context?.params?.userId as string);
    if (data === null) {
      return {
        notFound: true,
      };
    }
    return {
      props: {
        session,
      },
    };
  }
);
