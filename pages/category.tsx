import { Flex, Heading, useColorMode } from "@chakra-ui/react";
import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import React from "react";
import Navbar from "../components/Navbar";
import { motion } from "framer-motion";
import { UserType } from "../utils/types";
import Feed from "../components/Feed";
import variants from "../utils/variants";
import { GetServerSidePropsContext } from "next";
import { wrapper } from "../redux/store";
import { getCategoryImages } from "../redux/actions/categoryImageAction";

type Props = {
  category: string;
};

const Tag = (props: Props) => {
  const { colorMode } = useColorMode();
  const { data: session } = useSession();
  return (
    <motion.div
      style={{
        minHeight: "100vh",
        width: "100%",
        backgroundColor: colorMode === "light" ? "#f9f9f9" : "#030303",
      }}
      variants={variants}
      initial="hidden"
      animate="enter"
      exit="exit"
      transition={{ type: "linear" }}
    >
      <Head>
        <title>Tag - {props.category}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar user={session?.user as UserType} />
      <Flex
        paddingLeft="25px"
        paddingRight="10px"
        flexDirection="column"
        marginTop="50px"
      >
        <Heading
          fontSize="lg"
          fontWeight="bold"
          marginTop="70px"
          marginLeft="-10px"
        >
          Category - {props.category}
        </Heading>
        <Feed isTagImage={true} />
      </Flex>
    </motion.div>
  );
};

export default Tag;

export const getServerSideProps = wrapper.getServerSideProps(
  (store) => async (context: GetServerSidePropsContext) => {
    const session = await getSession(context);
    const cookie = context?.req?.cookies["next-auth.session-token"];
    const category = context?.query?.t;
    await store.dispatch(getCategoryImages(category as string, cookie));
    if (!session) {
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    }
    return {
      props: {
        session,
        category,
      },
    };
  }
);
